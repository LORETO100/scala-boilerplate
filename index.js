Index.PACKAGES = {"project" : [{"name" : "project.AsyncSpec", "shortDescription" : "Base class for non-blocking asynchronous tests.", "members_class" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "project\/AsyncSpec.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/AsyncSpec.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/AsyncSpec.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "project\/AsyncSpec.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[AsyncSpec, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/AsyncSpec.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/AsyncSpec.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "project\/AsyncSpec.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "project\/AsyncSpec.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "project\/AsyncSpec.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "project\/AsyncSpec.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "project\/AsyncSpec.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "project\/AsyncSpec.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "project\/AsyncSpec.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "project\/AsyncSpec.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "project\/AsyncSpec.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "project\/AsyncSpec.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "project\/AsyncSpec.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "project\/AsyncSpec.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "project\/AsyncSpec.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "project\/AsyncSpec.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/AsyncSpec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/AsyncSpec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsyncSpec) ⇒ Boolean, msg: ⇒ Any): AsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/AsyncSpec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsyncSpec) ⇒ Boolean): AsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/AsyncSpec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/AsyncSpec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/AsyncSpec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AsyncSpec, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/AsyncSpec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AsyncSpec, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/AsyncSpec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "project\/AsyncSpec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "project\/AsyncSpec.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "project\/AsyncSpec.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "project\/AsyncSpec.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "project\/AsyncSpec.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "project\/AsyncSpec.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "project\/AsyncSpec.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "project\/AsyncSpec.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "project\/AsyncSpec.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "project\/AsyncSpec.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "project\/AsyncSpec.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "project\/AsyncSpec.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "project\/AsyncSpec.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "project\/AsyncSpec.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "project\/AsyncSpec.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "project\/AsyncSpec.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "project\/AsyncSpec.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SuccessOrFailure", "tail" : "", "member" : "org.scalatest.TryValues.SuccessOrFailure", "link" : "project\/AsyncSpec.html#SuccessOrFailure[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Valuable", "tail" : "", "member" : "org.scalatest.OptionValues.Valuable", "link" : "project\/AsyncSpec.html#Valuable[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "RightValuable", "tail" : "", "member" : "org.scalatest.EitherValues.RightValuable", "link" : "project\/AsyncSpec.html#RightValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "LeftValuable", "tail" : "", "member" : "org.scalatest.EitherValues.LeftValuable", "link" : "project\/AsyncSpec.html#LeftValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "DiagrammedAssertionsHelper", "tail" : "", "member" : "org.scalatest.DiagrammedAssertions.DiagrammedAssertionsHelper", "link" : "project\/AsyncSpec.html#DiagrammedAssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "FreeSpecStringWrapper", "tail" : "", "member" : "org.scalatest.AsyncFreeSpecLike.FreeSpecStringWrapper", "link" : "project\/AsyncSpec.html#FreeSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.AsyncFreeSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "project\/AsyncSpec.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "NoArgAsyncTest", "tail" : "", "member" : "org.scalatest.AsyncTestSuite.NoArgAsyncTest", "link" : "project\/AsyncSpec.html#NoArgAsyncTestextends()=>org.scalatest.FutureOutcomewithTestData", "kind" : "trait"}, {"label" : "ResultOfCompleteInvocation", "tail" : "", "member" : "org.scalatest.CompleteLastly.ResultOfCompleteInvocation", "link" : "project\/AsyncSpec.html#ResultOfCompleteInvocation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "project\/AsyncSpec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "project\/AsyncSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "project\/AsyncSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"member" : "project.AsyncSpec#<init>", "error" : "unsupported entity"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockReturnsSelf", "link" : "project\/AsyncSpec.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockEmptyValues", "link" : "project\/AsyncSpec.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockDeepStubs", "link" : "project\/AsyncSpec.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "project\/AsyncSpec.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "project\/AsyncSpec.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "project\/AsyncSpec.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "project\/AsyncSpec.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "project\/AsyncSpec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "project\/AsyncSpec.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "project\/AsyncSpec.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "project\/AsyncSpec.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "project\/AsyncSpec.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "project\/AsyncSpec.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "project\/AsyncSpec.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "project\/AsyncSpec.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "project\/AsyncSpec.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "project\/AsyncSpec.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "project\/AsyncSpec.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "project\/AsyncSpec.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "project\/AsyncSpec.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "project\/AsyncSpec.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "project\/AsyncSpec.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "project\/AsyncSpec.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "project\/AsyncSpec.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/AsyncSpec.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/AsyncSpec.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "project\/AsyncSpec.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "project\/AsyncSpec.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "project\/AsyncSpec.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "project\/AsyncSpec.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "project\/AsyncSpec.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "project\/AsyncSpec.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "project\/AsyncSpec.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "project\/AsyncSpec.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "project\/AsyncSpec.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "project\/AsyncSpec.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "project\/AsyncSpec.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "project\/AsyncSpec.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "project\/AsyncSpec.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "project\/AsyncSpec.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "project\/AsyncSpec.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "project\/AsyncSpec.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "project\/AsyncSpec.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "project\/AsyncSpec.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "project\/AsyncSpec.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "project\/AsyncSpec.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "project\/AsyncSpec.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "project\/AsyncSpec.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "project\/AsyncSpec.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "project\/AsyncSpec.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "project\/AsyncSpec.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "project\/AsyncSpec.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "project\/AsyncSpec.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "project\/AsyncSpec.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "project\/AsyncSpec.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "project\/AsyncSpec.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "project\/AsyncSpec.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "project\/AsyncSpec.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "project\/AsyncSpec.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "project\/AsyncSpec.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "project\/AsyncSpec.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "project\/AsyncSpec.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "project\/AsyncSpec.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "project\/AsyncSpec.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "project\/AsyncSpec.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "project\/AsyncSpec.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "project\/AsyncSpec.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "project\/AsyncSpec.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "project\/AsyncSpec.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "project\/AsyncSpec.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "project\/AsyncSpec.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "project\/AsyncSpec.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "project\/AsyncSpec.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "project\/AsyncSpec.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "project\/AsyncSpec.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "project\/AsyncSpec.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "project\/AsyncSpec.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "project\/AsyncSpec.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "project\/AsyncSpec.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "project\/AsyncSpec.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "project\/AsyncSpec.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "project\/AsyncSpec.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "project\/AsyncSpec.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "project\/AsyncSpec.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "project\/AsyncSpec.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "project\/AsyncSpec.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "project\/AsyncSpec.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "project\/AsyncSpec.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "project\/AsyncSpec.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "project\/AsyncSpec.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "project\/AsyncSpec.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "project\/AsyncSpec.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "project\/AsyncSpec.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "project\/AsyncSpec.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "project\/AsyncSpec.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "project\/AsyncSpec.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "project\/AsyncSpec.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "project\/AsyncSpec.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "project\/AsyncSpec.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/AsyncSpec.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/AsyncSpec.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/AsyncSpec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/AsyncSpec.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "project\/AsyncSpec.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "project\/AsyncSpec.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "project\/AsyncSpec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "convertTryToSuccessOrFailure", "tail" : "(theTry: Try[T])(pos: Position): SuccessOrFailure[T]", "member" : "org.scalatest.TryValues.convertTryToSuccessOrFailure", "link" : "project\/AsyncSpec.html#convertTryToSuccessOrFailure[T](theTry:scala.util.Try[T])(implicitpos:org.scalactic.source.Position):TryValues.this.SuccessOrFailure[T]", "kind" : "implicit def"}, {"label" : "convertOptionToValuable", "tail" : "(opt: Option[T])(pos: Position): Valuable[T]", "member" : "org.scalatest.OptionValues.convertOptionToValuable", "link" : "project\/AsyncSpec.html#convertOptionToValuable[T](opt:Option[T])(implicitpos:org.scalactic.source.Position):OptionValues.this.Valuable[T]", "kind" : "implicit def"}, {"label" : "convertRightProjectionToValuable", "tail" : "(rightProj: RightProjection[L, R])(pos: Position): RightValuable[L, R]", "member" : "org.scalatest.EitherValues.convertRightProjectionToValuable", "link" : "project\/AsyncSpec.html#convertRightProjectionToValuable[L,R](rightProj:Either.RightProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.RightValuable[L,R]", "kind" : "implicit def"}, {"label" : "convertLeftProjectionToValuable", "tail" : "(leftProj: LeftProjection[L, R])(pos: Position): LeftValuable[L, R]", "member" : "org.scalatest.EitherValues.convertLeftProjectionToValuable", "link" : "project\/AsyncSpec.html#convertLeftProjectionToValuable[L,R](leftProj:Either.LeftProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.LeftValuable[L,R]", "kind" : "implicit def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/AsyncSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/AsyncSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/AsyncSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/AsyncSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "diagrammedAssertionsHelper", "tail" : ": DiagrammedAssertionsHelper", "member" : "org.scalatest.DiagrammedAssertions.diagrammedAssertionsHelper", "link" : "project\/AsyncSpec.html#diagrammedAssertionsHelper:DiagrammedAssertions.this.DiagrammedAssertionsHelper", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.AsyncFreeSpec.toString", "link" : "project\/AsyncSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.AsyncFreeSpecLike.testDataFor", "link" : "project\/AsyncSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.AsyncFreeSpecLike.styleName", "link" : "project\/AsyncSpec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.AsyncFreeSpecLike.behave", "link" : "project\/AsyncSpec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.run", "link" : "project\/AsyncSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.AsyncFreeSpecLike.testNames", "link" : "project\/AsyncSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.runTests", "link" : "project\/AsyncSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.runTest", "link" : "project\/AsyncSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.AsyncFreeSpecLike.tags", "link" : "project\/AsyncSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "convertToFreeSpecStringWrapper", "tail" : "(s: String)(pos: Position): FreeSpecStringWrapper", "member" : "org.scalatest.AsyncFreeSpecLike.convertToFreeSpecStringWrapper", "link" : "project\/AsyncSpec.html#convertToFreeSpecStringWrapper(s:String)(implicitpos:org.scalactic.source.Position):AsyncFreeSpecLike.this.FreeSpecStringWrapper", "kind" : "implicit def"}, {"label" : "registerIgnoredAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncFreeSpecLike.registerIgnoredAsyncTest", "link" : "project\/AsyncSpec.html#registerIgnoredAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncFreeSpecLike.registerAsyncTest", "link" : "project\/AsyncSpec.html#registerAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.AsyncFreeSpecLike.markup", "link" : "project\/AsyncSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.AsyncFreeSpecLike.alert", "link" : "project\/AsyncSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.AsyncFreeSpecLike.note", "link" : "project\/AsyncSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.AsyncFreeSpecLike.info", "link" : "project\/AsyncSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgAsyncTest): FutureOutcome", "member" : "org.scalatest.AsyncTestSuite.withFixture", "link" : "project\/AsyncSpec.html#withFixture(test:AsyncTestSuite.this.NoArgAsyncTest):org.scalatest.FutureOutcome", "kind" : "def"}, {"label" : "parallelAsyncTestExecution", "tail" : "(): Boolean", "member" : "org.scalatest.AsyncTestSuite.parallelAsyncTestExecution", "link" : "project\/AsyncSpec.html#parallelAsyncTestExecution:Boolean", "kind" : "def"}, {"label" : "convertAssertionToFutureAssertion", "tail" : "(assertion: Assertion): Future[Assertion]", "member" : "org.scalatest.AsyncTestSuite.convertAssertionToFutureAssertion", "link" : "project\/AsyncSpec.html#convertAssertionToFutureAssertion(assertion:org.scalatest.compatible.Assertion):scala.concurrent.Future[org.scalatest.compatible.Assertion]", "kind" : "implicit def"}, {"label" : "executionContext", "tail" : "(): ExecutionContext", "member" : "org.scalatest.AsyncTestSuite.executionContext", "link" : "project\/AsyncSpec.html#executionContext:scala.concurrent.ExecutionContext", "kind" : "implicit def"}, {"label" : "complete", "tail" : "(completeBlock: ⇒ T)(futuristic: Futuristic[T]): ResultOfCompleteInvocation[T]", "member" : "org.scalatest.CompleteLastly.complete", "link" : "project\/AsyncSpec.html#complete[T](completeBlock:=>T)(implicitfuturistic:org.scalatest.enablers.Futuristic[T]):CompleteLastly.this.ResultOfCompleteInvocation[T]", "kind" : "def"}, {"label" : "recoverToSucceededIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[Assertion]", "member" : "org.scalatest.RecoverMethods.recoverToSucceededIf", "link" : "project\/AsyncSpec.html#recoverToSucceededIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[org.scalatest.Assertion]", "kind" : "def"}, {"label" : "recoverToExceptionIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[T]", "member" : "org.scalatest.RecoverMethods.recoverToExceptionIf", "link" : "project\/AsyncSpec.html#recoverToExceptionIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "project\/AsyncSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "project\/AsyncSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "project\/AsyncSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "project\/AsyncSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "project\/AsyncSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "project\/AsyncSpec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "project\/AsyncSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "project\/AsyncSpec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "project\/AsyncSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "project\/AsyncSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "project\/AsyncSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "project\/AsyncSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/AsyncSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/AsyncSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/AsyncSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/AsyncSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/AsyncSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/AsyncSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/AsyncSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/AsyncSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/AsyncSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/AsyncSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "project\/AsyncSpec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "project\/AsyncSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "project\/AsyncSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "project\/AsyncSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "project\/AsyncSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "project\/AsyncSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "project\/AsyncSpec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "project\/AsyncSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "project\/AsyncSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "project\/AsyncSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "project\/AsyncSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "project\/AsyncSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "project\/AsyncSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "project\/AsyncSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "project\/AsyncSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "project\/AsyncSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "project\/AsyncSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "project\/AsyncSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/AsyncSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/AsyncSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/AsyncSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/AsyncSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/AsyncSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/AsyncSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "project\/AsyncSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/AsyncSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/AsyncSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/AsyncSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/AsyncSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/AsyncSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/AsyncSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/AsyncSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/AsyncSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/AsyncSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/AsyncSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/AsyncSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/AsyncSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/AsyncSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/AsyncSpec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/AsyncSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/AsyncSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/AsyncSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/AsyncSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "project\/AsyncSpec.html", "kind" : "class"}, {"name" : "project.Main", "shortDescription" : "", "object" : "project\/Main$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "project.Main.main", "link" : "project\/Main$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "project\/Main$.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/Main$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/Main$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/Main$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/Main$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/Main$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/Main$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/Main$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Main$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Main$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Main$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/Main$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/Main$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/Main$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/Main$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/Main$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/Main$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/Main$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/Main$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/Main$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "project.Mocking", "members_trait" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "project\/Mocking.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/Mocking.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/Mocking.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "project\/Mocking.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[Mocking, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/Mocking.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/Mocking.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "project\/Mocking.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "project\/Mocking.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "project\/Mocking.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "project\/Mocking.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "project\/Mocking.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "project\/Mocking.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "project\/Mocking.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "project\/Mocking.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "project\/Mocking.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "project\/Mocking.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "project\/Mocking.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "project\/Mocking.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "project\/Mocking.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "project\/Mocking.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/Mocking.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/Mocking.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Mocking) ⇒ Boolean, msg: ⇒ Any): Mocking", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/Mocking.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Mocking) ⇒ Boolean): Mocking", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/Mocking.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Mocking", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/Mocking.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Mocking", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/Mocking.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Mocking, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/Mocking.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Mocking, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/Mocking.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "project\/Mocking.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "project\/Mocking.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "project\/Mocking.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "project\/Mocking.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "project\/Mocking.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "project\/Mocking.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "project\/Mocking.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "project\/Mocking.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "project\/Mocking.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "project\/Mocking.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "project\/Mocking.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "project\/Mocking.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "project\/Mocking.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "project\/Mocking.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "project\/Mocking.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "project\/Mocking.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "project\/Mocking.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockReturnsSelf", "link" : "project\/Mocking.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockEmptyValues", "link" : "project\/Mocking.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockDeepStubs", "link" : "project\/Mocking.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "project\/Mocking.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "project\/Mocking.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "project\/Mocking.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "project\/Mocking.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "project\/Mocking.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "project\/Mocking.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "project\/Mocking.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "project\/Mocking.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "project\/Mocking.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "project\/Mocking.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "project\/Mocking.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "project\/Mocking.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "project\/Mocking.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "project\/Mocking.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "project\/Mocking.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "project\/Mocking.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "project\/Mocking.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "project\/Mocking.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "project\/Mocking.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "project\/Mocking.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "project\/Mocking.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/Mocking.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/Mocking.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "project\/Mocking.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "project\/Mocking.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "project\/Mocking.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "project\/Mocking.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "project\/Mocking.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "project\/Mocking.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "project\/Mocking.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "project\/Mocking.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "project\/Mocking.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "project\/Mocking.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "project\/Mocking.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "project\/Mocking.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "project\/Mocking.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "project\/Mocking.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "project\/Mocking.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "project\/Mocking.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "project\/Mocking.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "project\/Mocking.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "project\/Mocking.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "project\/Mocking.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "project\/Mocking.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "project\/Mocking.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "project\/Mocking.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "project\/Mocking.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "project\/Mocking.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "project\/Mocking.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "project\/Mocking.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "project\/Mocking.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "project\/Mocking.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "project\/Mocking.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "project\/Mocking.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "project\/Mocking.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "project\/Mocking.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "project\/Mocking.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "project\/Mocking.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "project\/Mocking.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "project\/Mocking.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "project\/Mocking.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "project\/Mocking.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "project\/Mocking.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "project\/Mocking.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "project\/Mocking.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "project\/Mocking.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "project\/Mocking.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "project\/Mocking.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "project\/Mocking.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "project\/Mocking.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "project\/Mocking.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "project\/Mocking.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "project\/Mocking.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "project\/Mocking.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "project\/Mocking.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "project\/Mocking.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "project\/Mocking.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "project\/Mocking.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "project\/Mocking.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "project\/Mocking.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "project\/Mocking.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "project\/Mocking.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "project\/Mocking.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "project\/Mocking.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "project\/Mocking.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "project\/Mocking.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "project\/Mocking.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "project\/Mocking.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "project\/Mocking.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "project\/Mocking.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "project\/Mocking.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "project\/Mocking.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "project\/Mocking.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "project\/Mocking.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "project\/Mocking.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "project\/Mocking.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/Mocking.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/Mocking.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/Mocking.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/Mocking.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "project\/Mocking.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "project\/Mocking.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "project\/Mocking.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/Mocking.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/Mocking.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/Mocking.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/Mocking.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/Mocking.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/Mocking.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/Mocking.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Mocking.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Mocking.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Mocking.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/Mocking.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/Mocking.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/Mocking.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/Mocking.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/Mocking.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/Mocking.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/Mocking.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/Mocking.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/Mocking.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Base trait for mocking.", "object" : "project\/Mocking$.html", "members_object" : [{"label" : "ReturnsSelf", "tail" : ": DefaultAnswer", "member" : "project.Mocking.ReturnsSelf", "link" : "project\/Mocking$.html#ReturnsSelf:org.mockito.stubbing.DefaultAnswer", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/Mocking$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/Mocking$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/Mocking$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/Mocking$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/Mocking$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/Mocking$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/Mocking$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Mocking$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Mocking$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Mocking$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/Mocking$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/Mocking$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/Mocking$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/Mocking$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/Mocking$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/Mocking$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/Mocking$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/Mocking$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/Mocking$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "project\/Mocking.html", "kind" : "trait"}, {"name" : "project.SampleAsyncSpec", "shortDescription" : "", "members_class" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "project\/SampleAsyncSpec.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/SampleAsyncSpec.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/SampleAsyncSpec.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "project\/SampleAsyncSpec.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[SampleAsyncSpec, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/SampleAsyncSpec.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/SampleAsyncSpec.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "project\/SampleAsyncSpec.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "project\/SampleAsyncSpec.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "project\/SampleAsyncSpec.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "project\/SampleAsyncSpec.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "project\/SampleAsyncSpec.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "project\/SampleAsyncSpec.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "project\/SampleAsyncSpec.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "project\/SampleAsyncSpec.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "project\/SampleAsyncSpec.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "project\/SampleAsyncSpec.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "project\/SampleAsyncSpec.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "project\/SampleAsyncSpec.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "project\/SampleAsyncSpec.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[SampleAsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "project\/SampleAsyncSpec.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/SampleAsyncSpec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/SampleAsyncSpec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SampleAsyncSpec) ⇒ Boolean, msg: ⇒ Any): SampleAsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SampleAsyncSpec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SampleAsyncSpec) ⇒ Boolean): SampleAsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SampleAsyncSpec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SampleAsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SampleAsyncSpec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SampleAsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SampleAsyncSpec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SampleAsyncSpec, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/SampleAsyncSpec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SampleAsyncSpec, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/SampleAsyncSpec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "project\/SampleAsyncSpec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "project\/SampleAsyncSpec.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "project\/SampleAsyncSpec.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "project\/SampleAsyncSpec.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "project\/SampleAsyncSpec.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "project\/SampleAsyncSpec.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SuccessOrFailure", "tail" : "", "member" : "org.scalatest.TryValues.SuccessOrFailure", "link" : "project\/SampleAsyncSpec.html#SuccessOrFailure[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Valuable", "tail" : "", "member" : "org.scalatest.OptionValues.Valuable", "link" : "project\/SampleAsyncSpec.html#Valuable[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "RightValuable", "tail" : "", "member" : "org.scalatest.EitherValues.RightValuable", "link" : "project\/SampleAsyncSpec.html#RightValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "LeftValuable", "tail" : "", "member" : "org.scalatest.EitherValues.LeftValuable", "link" : "project\/SampleAsyncSpec.html#LeftValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "DiagrammedAssertionsHelper", "tail" : "", "member" : "org.scalatest.DiagrammedAssertions.DiagrammedAssertionsHelper", "link" : "project\/SampleAsyncSpec.html#DiagrammedAssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "FreeSpecStringWrapper", "tail" : "", "member" : "org.scalatest.AsyncFreeSpecLike.FreeSpecStringWrapper", "link" : "project\/SampleAsyncSpec.html#FreeSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.AsyncFreeSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "project\/SampleAsyncSpec.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "NoArgAsyncTest", "tail" : "", "member" : "org.scalatest.AsyncTestSuite.NoArgAsyncTest", "link" : "project\/SampleAsyncSpec.html#NoArgAsyncTestextends()=>org.scalatest.FutureOutcomewithTestData", "kind" : "trait"}, {"label" : "ResultOfCompleteInvocation", "tail" : "", "member" : "org.scalatest.CompleteLastly.ResultOfCompleteInvocation", "link" : "project\/SampleAsyncSpec.html#ResultOfCompleteInvocation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "project\/SampleAsyncSpec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "project\/SampleAsyncSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "project\/SampleAsyncSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Context", "tail" : "", "member" : "project.SampleAsyncSpec.Context", "link" : "project\/SampleAsyncSpec.html#ContextextendsAnyRef", "kind" : "class"}, {"member" : "project.SampleAsyncSpec#<init>", "error" : "unsupported entity"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockReturnsSelf", "link" : "project\/SampleAsyncSpec.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockEmptyValues", "link" : "project\/SampleAsyncSpec.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockDeepStubs", "link" : "project\/SampleAsyncSpec.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "project\/SampleAsyncSpec.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "project\/SampleAsyncSpec.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "project\/SampleAsyncSpec.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "project\/SampleAsyncSpec.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "project\/SampleAsyncSpec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "project\/SampleAsyncSpec.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "project\/SampleAsyncSpec.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "project\/SampleAsyncSpec.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "project\/SampleAsyncSpec.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "project\/SampleAsyncSpec.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "project\/SampleAsyncSpec.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "project\/SampleAsyncSpec.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "project\/SampleAsyncSpec.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "project\/SampleAsyncSpec.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "project\/SampleAsyncSpec.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "project\/SampleAsyncSpec.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "project\/SampleAsyncSpec.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "project\/SampleAsyncSpec.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "project\/SampleAsyncSpec.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "project\/SampleAsyncSpec.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "project\/SampleAsyncSpec.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/SampleAsyncSpec.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/SampleAsyncSpec.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "project\/SampleAsyncSpec.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "project\/SampleAsyncSpec.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "project\/SampleAsyncSpec.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "project\/SampleAsyncSpec.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "project\/SampleAsyncSpec.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "project\/SampleAsyncSpec.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "project\/SampleAsyncSpec.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "project\/SampleAsyncSpec.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "project\/SampleAsyncSpec.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "project\/SampleAsyncSpec.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "project\/SampleAsyncSpec.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "project\/SampleAsyncSpec.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "project\/SampleAsyncSpec.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "project\/SampleAsyncSpec.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "project\/SampleAsyncSpec.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "project\/SampleAsyncSpec.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "project\/SampleAsyncSpec.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "project\/SampleAsyncSpec.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "project\/SampleAsyncSpec.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "project\/SampleAsyncSpec.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "project\/SampleAsyncSpec.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "project\/SampleAsyncSpec.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "project\/SampleAsyncSpec.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "project\/SampleAsyncSpec.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "project\/SampleAsyncSpec.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "project\/SampleAsyncSpec.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "project\/SampleAsyncSpec.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "project\/SampleAsyncSpec.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "project\/SampleAsyncSpec.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "project\/SampleAsyncSpec.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "project\/SampleAsyncSpec.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "project\/SampleAsyncSpec.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "project\/SampleAsyncSpec.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "project\/SampleAsyncSpec.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "project\/SampleAsyncSpec.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "project\/SampleAsyncSpec.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "project\/SampleAsyncSpec.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "project\/SampleAsyncSpec.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "project\/SampleAsyncSpec.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "project\/SampleAsyncSpec.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "project\/SampleAsyncSpec.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "project\/SampleAsyncSpec.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "project\/SampleAsyncSpec.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "project\/SampleAsyncSpec.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "project\/SampleAsyncSpec.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "project\/SampleAsyncSpec.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "project\/SampleAsyncSpec.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "project\/SampleAsyncSpec.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "project\/SampleAsyncSpec.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "project\/SampleAsyncSpec.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "project\/SampleAsyncSpec.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "project\/SampleAsyncSpec.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "project\/SampleAsyncSpec.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "project\/SampleAsyncSpec.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "project\/SampleAsyncSpec.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "project\/SampleAsyncSpec.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "project\/SampleAsyncSpec.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "project\/SampleAsyncSpec.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "project\/SampleAsyncSpec.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "project\/SampleAsyncSpec.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "project\/SampleAsyncSpec.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "project\/SampleAsyncSpec.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "project\/SampleAsyncSpec.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "project\/SampleAsyncSpec.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "project\/SampleAsyncSpec.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "project\/SampleAsyncSpec.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "project\/SampleAsyncSpec.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "project\/SampleAsyncSpec.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "project\/SampleAsyncSpec.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "project\/SampleAsyncSpec.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "project\/SampleAsyncSpec.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "project\/SampleAsyncSpec.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "project\/SampleAsyncSpec.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/SampleAsyncSpec.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/SampleAsyncSpec.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/SampleAsyncSpec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/SampleAsyncSpec.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "project\/SampleAsyncSpec.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "project\/SampleAsyncSpec.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "project\/SampleAsyncSpec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "convertTryToSuccessOrFailure", "tail" : "(theTry: Try[T])(pos: Position): SuccessOrFailure[T]", "member" : "org.scalatest.TryValues.convertTryToSuccessOrFailure", "link" : "project\/SampleAsyncSpec.html#convertTryToSuccessOrFailure[T](theTry:scala.util.Try[T])(implicitpos:org.scalactic.source.Position):TryValues.this.SuccessOrFailure[T]", "kind" : "implicit def"}, {"label" : "convertOptionToValuable", "tail" : "(opt: Option[T])(pos: Position): Valuable[T]", "member" : "org.scalatest.OptionValues.convertOptionToValuable", "link" : "project\/SampleAsyncSpec.html#convertOptionToValuable[T](opt:Option[T])(implicitpos:org.scalactic.source.Position):OptionValues.this.Valuable[T]", "kind" : "implicit def"}, {"label" : "convertRightProjectionToValuable", "tail" : "(rightProj: RightProjection[L, R])(pos: Position): RightValuable[L, R]", "member" : "org.scalatest.EitherValues.convertRightProjectionToValuable", "link" : "project\/SampleAsyncSpec.html#convertRightProjectionToValuable[L,R](rightProj:Either.RightProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.RightValuable[L,R]", "kind" : "implicit def"}, {"label" : "convertLeftProjectionToValuable", "tail" : "(leftProj: LeftProjection[L, R])(pos: Position): LeftValuable[L, R]", "member" : "org.scalatest.EitherValues.convertLeftProjectionToValuable", "link" : "project\/SampleAsyncSpec.html#convertLeftProjectionToValuable[L,R](leftProj:Either.LeftProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.LeftValuable[L,R]", "kind" : "implicit def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/SampleAsyncSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/SampleAsyncSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/SampleAsyncSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/SampleAsyncSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "diagrammedAssertionsHelper", "tail" : ": DiagrammedAssertionsHelper", "member" : "org.scalatest.DiagrammedAssertions.diagrammedAssertionsHelper", "link" : "project\/SampleAsyncSpec.html#diagrammedAssertionsHelper:DiagrammedAssertions.this.DiagrammedAssertionsHelper", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.AsyncFreeSpec.toString", "link" : "project\/SampleAsyncSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.AsyncFreeSpecLike.testDataFor", "link" : "project\/SampleAsyncSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.AsyncFreeSpecLike.styleName", "link" : "project\/SampleAsyncSpec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.AsyncFreeSpecLike.behave", "link" : "project\/SampleAsyncSpec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.run", "link" : "project\/SampleAsyncSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.AsyncFreeSpecLike.testNames", "link" : "project\/SampleAsyncSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.runTests", "link" : "project\/SampleAsyncSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.runTest", "link" : "project\/SampleAsyncSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.AsyncFreeSpecLike.tags", "link" : "project\/SampleAsyncSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "convertToFreeSpecStringWrapper", "tail" : "(s: String)(pos: Position): FreeSpecStringWrapper", "member" : "org.scalatest.AsyncFreeSpecLike.convertToFreeSpecStringWrapper", "link" : "project\/SampleAsyncSpec.html#convertToFreeSpecStringWrapper(s:String)(implicitpos:org.scalactic.source.Position):AsyncFreeSpecLike.this.FreeSpecStringWrapper", "kind" : "implicit def"}, {"label" : "registerIgnoredAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncFreeSpecLike.registerIgnoredAsyncTest", "link" : "project\/SampleAsyncSpec.html#registerIgnoredAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncFreeSpecLike.registerAsyncTest", "link" : "project\/SampleAsyncSpec.html#registerAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.AsyncFreeSpecLike.markup", "link" : "project\/SampleAsyncSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.AsyncFreeSpecLike.alert", "link" : "project\/SampleAsyncSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.AsyncFreeSpecLike.note", "link" : "project\/SampleAsyncSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.AsyncFreeSpecLike.info", "link" : "project\/SampleAsyncSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgAsyncTest): FutureOutcome", "member" : "org.scalatest.AsyncTestSuite.withFixture", "link" : "project\/SampleAsyncSpec.html#withFixture(test:AsyncTestSuite.this.NoArgAsyncTest):org.scalatest.FutureOutcome", "kind" : "def"}, {"label" : "parallelAsyncTestExecution", "tail" : "(): Boolean", "member" : "org.scalatest.AsyncTestSuite.parallelAsyncTestExecution", "link" : "project\/SampleAsyncSpec.html#parallelAsyncTestExecution:Boolean", "kind" : "def"}, {"label" : "convertAssertionToFutureAssertion", "tail" : "(assertion: Assertion): Future[Assertion]", "member" : "org.scalatest.AsyncTestSuite.convertAssertionToFutureAssertion", "link" : "project\/SampleAsyncSpec.html#convertAssertionToFutureAssertion(assertion:org.scalatest.compatible.Assertion):scala.concurrent.Future[org.scalatest.compatible.Assertion]", "kind" : "implicit def"}, {"label" : "executionContext", "tail" : "(): ExecutionContext", "member" : "org.scalatest.AsyncTestSuite.executionContext", "link" : "project\/SampleAsyncSpec.html#executionContext:scala.concurrent.ExecutionContext", "kind" : "implicit def"}, {"label" : "complete", "tail" : "(completeBlock: ⇒ T)(futuristic: Futuristic[T]): ResultOfCompleteInvocation[T]", "member" : "org.scalatest.CompleteLastly.complete", "link" : "project\/SampleAsyncSpec.html#complete[T](completeBlock:=>T)(implicitfuturistic:org.scalatest.enablers.Futuristic[T]):CompleteLastly.this.ResultOfCompleteInvocation[T]", "kind" : "def"}, {"label" : "recoverToSucceededIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[Assertion]", "member" : "org.scalatest.RecoverMethods.recoverToSucceededIf", "link" : "project\/SampleAsyncSpec.html#recoverToSucceededIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[org.scalatest.Assertion]", "kind" : "def"}, {"label" : "recoverToExceptionIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[T]", "member" : "org.scalatest.RecoverMethods.recoverToExceptionIf", "link" : "project\/SampleAsyncSpec.html#recoverToExceptionIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "project\/SampleAsyncSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "project\/SampleAsyncSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "project\/SampleAsyncSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "project\/SampleAsyncSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "project\/SampleAsyncSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "project\/SampleAsyncSpec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "project\/SampleAsyncSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "project\/SampleAsyncSpec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "project\/SampleAsyncSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "project\/SampleAsyncSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "project\/SampleAsyncSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "project\/SampleAsyncSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SampleAsyncSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SampleAsyncSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SampleAsyncSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SampleAsyncSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SampleAsyncSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SampleAsyncSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SampleAsyncSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SampleAsyncSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/SampleAsyncSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/SampleAsyncSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "project\/SampleAsyncSpec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "project\/SampleAsyncSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "project\/SampleAsyncSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "project\/SampleAsyncSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "project\/SampleAsyncSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "project\/SampleAsyncSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "project\/SampleAsyncSpec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "project\/SampleAsyncSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "project\/SampleAsyncSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "project\/SampleAsyncSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "project\/SampleAsyncSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "project\/SampleAsyncSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "project\/SampleAsyncSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "project\/SampleAsyncSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "project\/SampleAsyncSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "project\/SampleAsyncSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "project\/SampleAsyncSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "project\/SampleAsyncSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SampleAsyncSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SampleAsyncSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SampleAsyncSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SampleAsyncSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SampleAsyncSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SampleAsyncSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "project\/SampleAsyncSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/SampleAsyncSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/SampleAsyncSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/SampleAsyncSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/SampleAsyncSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/SampleAsyncSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/SampleAsyncSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/SampleAsyncSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SampleAsyncSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SampleAsyncSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SampleAsyncSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/SampleAsyncSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/SampleAsyncSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/SampleAsyncSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/SampleAsyncSpec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/SampleAsyncSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/SampleAsyncSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/SampleAsyncSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/SampleAsyncSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "project\/SampleAsyncSpec.html", "kind" : "class"}, {"name" : "project.SampleSpec", "shortDescription" : "", "members_class" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "project\/SampleSpec.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/SampleSpec.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/SampleSpec.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "project\/SampleSpec.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[SampleSpec, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/SampleSpec.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/SampleSpec.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "project\/SampleSpec.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "project\/SampleSpec.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "project\/SampleSpec.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "project\/SampleSpec.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "project\/SampleSpec.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "project\/SampleSpec.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "project\/SampleSpec.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "project\/SampleSpec.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "project\/SampleSpec.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "project\/SampleSpec.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "project\/SampleSpec.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "project\/SampleSpec.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "project\/SampleSpec.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[SampleSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "project\/SampleSpec.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/SampleSpec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/SampleSpec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SampleSpec) ⇒ Boolean, msg: ⇒ Any): SampleSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SampleSpec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SampleSpec) ⇒ Boolean): SampleSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SampleSpec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SampleSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SampleSpec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SampleSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SampleSpec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SampleSpec, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/SampleSpec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SampleSpec, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/SampleSpec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "project\/SampleSpec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "project\/SampleSpec.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "project\/SampleSpec.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "project\/SampleSpec.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "project\/SampleSpec.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "project\/SampleSpec.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "project\/SampleSpec.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "project\/SampleSpec.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "project\/SampleSpec.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "project\/SampleSpec.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "project\/SampleSpec.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "project\/SampleSpec.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "project\/SampleSpec.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "project\/SampleSpec.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "project\/SampleSpec.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "project\/SampleSpec.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "project\/SampleSpec.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SuccessOrFailure", "tail" : "", "member" : "org.scalatest.TryValues.SuccessOrFailure", "link" : "project\/SampleSpec.html#SuccessOrFailure[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Valuable", "tail" : "", "member" : "org.scalatest.OptionValues.Valuable", "link" : "project\/SampleSpec.html#Valuable[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "RightValuable", "tail" : "", "member" : "org.scalatest.EitherValues.RightValuable", "link" : "project\/SampleSpec.html#RightValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "LeftValuable", "tail" : "", "member" : "org.scalatest.EitherValues.LeftValuable", "link" : "project\/SampleSpec.html#LeftValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "DiagrammedAssertionsHelper", "tail" : "", "member" : "org.scalatest.DiagrammedAssertions.DiagrammedAssertionsHelper", "link" : "project\/SampleSpec.html#DiagrammedAssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "FreeSpecStringWrapper", "tail" : "", "member" : "org.scalatest.FreeSpecLike.FreeSpecStringWrapper", "link" : "project\/SampleSpec.html#FreeSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.FreeSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "project\/SampleSpec.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "project\/SampleSpec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "project\/SampleSpec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "project\/SampleSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "project\/SampleSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Context", "tail" : "", "member" : "project.SampleSpec.Context", "link" : "project\/SampleSpec.html#ContextextendsAnyRef", "kind" : "class"}, {"member" : "project.SampleSpec#<init>", "error" : "unsupported entity"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockReturnsSelf", "link" : "project\/SampleSpec.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockEmptyValues", "link" : "project\/SampleSpec.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockDeepStubs", "link" : "project\/SampleSpec.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "project\/SampleSpec.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "project\/SampleSpec.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "project\/SampleSpec.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "project\/SampleSpec.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "project\/SampleSpec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "project\/SampleSpec.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "project\/SampleSpec.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "project\/SampleSpec.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "project\/SampleSpec.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "project\/SampleSpec.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "project\/SampleSpec.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "project\/SampleSpec.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "project\/SampleSpec.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "project\/SampleSpec.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "project\/SampleSpec.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "project\/SampleSpec.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "project\/SampleSpec.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "project\/SampleSpec.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "project\/SampleSpec.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "project\/SampleSpec.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "project\/SampleSpec.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/SampleSpec.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/SampleSpec.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "project\/SampleSpec.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "project\/SampleSpec.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "project\/SampleSpec.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "project\/SampleSpec.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "project\/SampleSpec.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "project\/SampleSpec.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "project\/SampleSpec.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "project\/SampleSpec.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "project\/SampleSpec.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "project\/SampleSpec.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "project\/SampleSpec.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "project\/SampleSpec.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "project\/SampleSpec.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "project\/SampleSpec.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "project\/SampleSpec.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "project\/SampleSpec.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "project\/SampleSpec.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "project\/SampleSpec.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "project\/SampleSpec.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "project\/SampleSpec.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "project\/SampleSpec.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "project\/SampleSpec.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "project\/SampleSpec.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "project\/SampleSpec.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "project\/SampleSpec.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "project\/SampleSpec.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "project\/SampleSpec.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "project\/SampleSpec.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "project\/SampleSpec.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "project\/SampleSpec.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "project\/SampleSpec.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "project\/SampleSpec.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "project\/SampleSpec.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "project\/SampleSpec.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "project\/SampleSpec.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "project\/SampleSpec.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "project\/SampleSpec.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "project\/SampleSpec.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "project\/SampleSpec.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "project\/SampleSpec.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "project\/SampleSpec.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "project\/SampleSpec.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "project\/SampleSpec.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "project\/SampleSpec.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "project\/SampleSpec.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "project\/SampleSpec.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "project\/SampleSpec.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "project\/SampleSpec.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "project\/SampleSpec.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "project\/SampleSpec.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "project\/SampleSpec.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "project\/SampleSpec.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "project\/SampleSpec.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "project\/SampleSpec.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "project\/SampleSpec.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "project\/SampleSpec.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "project\/SampleSpec.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "project\/SampleSpec.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "project\/SampleSpec.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "project\/SampleSpec.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "project\/SampleSpec.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "project\/SampleSpec.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "project\/SampleSpec.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "project\/SampleSpec.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "project\/SampleSpec.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "project\/SampleSpec.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "project\/SampleSpec.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "project\/SampleSpec.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "project\/SampleSpec.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "project\/SampleSpec.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "project\/SampleSpec.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "project\/SampleSpec.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "project\/SampleSpec.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/SampleSpec.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/SampleSpec.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/SampleSpec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/SampleSpec.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "project\/SampleSpec.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "project\/SampleSpec.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "project\/SampleSpec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "convertTryToSuccessOrFailure", "tail" : "(theTry: Try[T])(pos: Position): SuccessOrFailure[T]", "member" : "org.scalatest.TryValues.convertTryToSuccessOrFailure", "link" : "project\/SampleSpec.html#convertTryToSuccessOrFailure[T](theTry:scala.util.Try[T])(implicitpos:org.scalactic.source.Position):TryValues.this.SuccessOrFailure[T]", "kind" : "implicit def"}, {"label" : "convertOptionToValuable", "tail" : "(opt: Option[T])(pos: Position): Valuable[T]", "member" : "org.scalatest.OptionValues.convertOptionToValuable", "link" : "project\/SampleSpec.html#convertOptionToValuable[T](opt:Option[T])(implicitpos:org.scalactic.source.Position):OptionValues.this.Valuable[T]", "kind" : "implicit def"}, {"label" : "convertRightProjectionToValuable", "tail" : "(rightProj: RightProjection[L, R])(pos: Position): RightValuable[L, R]", "member" : "org.scalatest.EitherValues.convertRightProjectionToValuable", "link" : "project\/SampleSpec.html#convertRightProjectionToValuable[L,R](rightProj:Either.RightProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.RightValuable[L,R]", "kind" : "implicit def"}, {"label" : "convertLeftProjectionToValuable", "tail" : "(leftProj: LeftProjection[L, R])(pos: Position): LeftValuable[L, R]", "member" : "org.scalatest.EitherValues.convertLeftProjectionToValuable", "link" : "project\/SampleSpec.html#convertLeftProjectionToValuable[L,R](leftProj:Either.LeftProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.LeftValuable[L,R]", "kind" : "implicit def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/SampleSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/SampleSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/SampleSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/SampleSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "diagrammedAssertionsHelper", "tail" : ": DiagrammedAssertionsHelper", "member" : "org.scalatest.DiagrammedAssertions.diagrammedAssertionsHelper", "link" : "project\/SampleSpec.html#diagrammedAssertionsHelper:DiagrammedAssertions.this.DiagrammedAssertionsHelper", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FreeSpec.toString", "link" : "project\/SampleSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FreeSpecLike.testDataFor", "link" : "project\/SampleSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FreeSpecLike.styleName", "link" : "project\/SampleSpec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FreeSpecLike.behave", "link" : "project\/SampleSpec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FreeSpecLike.run", "link" : "project\/SampleSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FreeSpecLike.testNames", "link" : "project\/SampleSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FreeSpecLike.runTests", "link" : "project\/SampleSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FreeSpecLike.runTest", "link" : "project\/SampleSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FreeSpecLike.tags", "link" : "project\/SampleSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "convertToFreeSpecStringWrapper", "tail" : "(s: String)(pos: Position): FreeSpecStringWrapper", "member" : "org.scalatest.FreeSpecLike.convertToFreeSpecStringWrapper", "link" : "project\/SampleSpec.html#convertToFreeSpecStringWrapper(s:String)(implicitpos:org.scalactic.source.Position):FreeSpecLike.this.FreeSpecStringWrapper", "kind" : "implicit def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FreeSpecLike.registerIgnoredTest", "link" : "project\/SampleSpec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FreeSpecLike.registerTest", "link" : "project\/SampleSpec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FreeSpecLike.markup", "link" : "project\/SampleSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FreeSpecLike.alert", "link" : "project\/SampleSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FreeSpecLike.note", "link" : "project\/SampleSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FreeSpecLike.info", "link" : "project\/SampleSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "project\/SampleSpec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "project\/SampleSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "project\/SampleSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "project\/SampleSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "project\/SampleSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "project\/SampleSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "project\/SampleSpec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "project\/SampleSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "project\/SampleSpec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "project\/SampleSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "project\/SampleSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "project\/SampleSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "project\/SampleSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SampleSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SampleSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SampleSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SampleSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SampleSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SampleSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SampleSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SampleSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/SampleSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/SampleSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "project\/SampleSpec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "project\/SampleSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "project\/SampleSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "project\/SampleSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "project\/SampleSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "project\/SampleSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "project\/SampleSpec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "project\/SampleSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "project\/SampleSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "project\/SampleSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "project\/SampleSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "project\/SampleSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "project\/SampleSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "project\/SampleSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "project\/SampleSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "project\/SampleSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "project\/SampleSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "project\/SampleSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SampleSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SampleSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SampleSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SampleSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SampleSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SampleSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "project\/SampleSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/SampleSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/SampleSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/SampleSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/SampleSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/SampleSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/SampleSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/SampleSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SampleSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SampleSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SampleSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/SampleSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/SampleSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/SampleSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/SampleSpec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/SampleSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/SampleSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/SampleSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/SampleSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "project\/SampleSpec.html", "kind" : "class"}, {"name" : "project.Spec", "shortDescription" : "Base class for general tests.", "members_class" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "project\/Spec.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/Spec.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "project\/Spec.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "project\/Spec.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[Spec, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/Spec.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "project\/Spec.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "project\/Spec.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "project\/Spec.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "project\/Spec.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "project\/Spec.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "project\/Spec.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "project\/Spec.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "project\/Spec.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "project\/Spec.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "project\/Spec.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "project\/Spec.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "project\/Spec.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "project\/Spec.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "project\/Spec.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "project\/Spec.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/Spec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/Spec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Spec) ⇒ Boolean, msg: ⇒ Any): Spec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/Spec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Spec) ⇒ Boolean): Spec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/Spec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Spec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/Spec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Spec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/Spec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Spec, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/Spec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Spec, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/Spec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "project\/Spec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "project\/Spec.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "project\/Spec.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "project\/Spec.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "project\/Spec.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "project\/Spec.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "project\/Spec.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "project\/Spec.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "project\/Spec.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "project\/Spec.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "project\/Spec.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "project\/Spec.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "project\/Spec.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "project\/Spec.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "project\/Spec.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "project\/Spec.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "project\/Spec.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SuccessOrFailure", "tail" : "", "member" : "org.scalatest.TryValues.SuccessOrFailure", "link" : "project\/Spec.html#SuccessOrFailure[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Valuable", "tail" : "", "member" : "org.scalatest.OptionValues.Valuable", "link" : "project\/Spec.html#Valuable[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "RightValuable", "tail" : "", "member" : "org.scalatest.EitherValues.RightValuable", "link" : "project\/Spec.html#RightValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "LeftValuable", "tail" : "", "member" : "org.scalatest.EitherValues.LeftValuable", "link" : "project\/Spec.html#LeftValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "DiagrammedAssertionsHelper", "tail" : "", "member" : "org.scalatest.DiagrammedAssertions.DiagrammedAssertionsHelper", "link" : "project\/Spec.html#DiagrammedAssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "FreeSpecStringWrapper", "tail" : "", "member" : "org.scalatest.FreeSpecLike.FreeSpecStringWrapper", "link" : "project\/Spec.html#FreeSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.FreeSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "project\/Spec.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "project\/Spec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "project\/Spec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "project\/Spec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "project\/Spec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"member" : "project.Spec#<init>", "error" : "unsupported entity"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockReturnsSelf", "link" : "project\/Spec.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockEmptyValues", "link" : "project\/Spec.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "project.Mocking.mockDeepStubs", "link" : "project\/Spec.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "project\/Spec.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "project\/Spec.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "project\/Spec.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "project\/Spec.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "project\/Spec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "project\/Spec.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "project\/Spec.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "project\/Spec.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "project\/Spec.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "project\/Spec.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "project\/Spec.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "project\/Spec.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "project\/Spec.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "project\/Spec.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "project\/Spec.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "project\/Spec.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "project\/Spec.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "project\/Spec.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "project\/Spec.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "project\/Spec.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "project\/Spec.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/Spec.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "project\/Spec.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "project\/Spec.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "project\/Spec.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "project\/Spec.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "project\/Spec.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "project\/Spec.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "project\/Spec.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "project\/Spec.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "project\/Spec.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "project\/Spec.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "project\/Spec.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "project\/Spec.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "project\/Spec.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "project\/Spec.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "project\/Spec.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "project\/Spec.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "project\/Spec.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "project\/Spec.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "project\/Spec.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "project\/Spec.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "project\/Spec.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "project\/Spec.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "project\/Spec.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "project\/Spec.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "project\/Spec.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "project\/Spec.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "project\/Spec.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "project\/Spec.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "project\/Spec.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "project\/Spec.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "project\/Spec.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "project\/Spec.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "project\/Spec.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "project\/Spec.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "project\/Spec.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "project\/Spec.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "project\/Spec.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "project\/Spec.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "project\/Spec.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "project\/Spec.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "project\/Spec.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "project\/Spec.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "project\/Spec.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "project\/Spec.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "project\/Spec.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "project\/Spec.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "project\/Spec.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "project\/Spec.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "project\/Spec.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "project\/Spec.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "project\/Spec.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "project\/Spec.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "project\/Spec.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "project\/Spec.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "project\/Spec.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "project\/Spec.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "project\/Spec.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "project\/Spec.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "project\/Spec.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "project\/Spec.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "project\/Spec.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "project\/Spec.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "project\/Spec.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "project\/Spec.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "project\/Spec.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "project\/Spec.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "project\/Spec.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "project\/Spec.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "project\/Spec.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "project\/Spec.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "project\/Spec.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "project\/Spec.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "project\/Spec.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "project\/Spec.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/Spec.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/Spec.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/Spec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "project\/Spec.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "project\/Spec.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "project\/Spec.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "project\/Spec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "convertTryToSuccessOrFailure", "tail" : "(theTry: Try[T])(pos: Position): SuccessOrFailure[T]", "member" : "org.scalatest.TryValues.convertTryToSuccessOrFailure", "link" : "project\/Spec.html#convertTryToSuccessOrFailure[T](theTry:scala.util.Try[T])(implicitpos:org.scalactic.source.Position):TryValues.this.SuccessOrFailure[T]", "kind" : "implicit def"}, {"label" : "convertOptionToValuable", "tail" : "(opt: Option[T])(pos: Position): Valuable[T]", "member" : "org.scalatest.OptionValues.convertOptionToValuable", "link" : "project\/Spec.html#convertOptionToValuable[T](opt:Option[T])(implicitpos:org.scalactic.source.Position):OptionValues.this.Valuable[T]", "kind" : "implicit def"}, {"label" : "convertRightProjectionToValuable", "tail" : "(rightProj: RightProjection[L, R])(pos: Position): RightValuable[L, R]", "member" : "org.scalatest.EitherValues.convertRightProjectionToValuable", "link" : "project\/Spec.html#convertRightProjectionToValuable[L,R](rightProj:Either.RightProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.RightValuable[L,R]", "kind" : "implicit def"}, {"label" : "convertLeftProjectionToValuable", "tail" : "(leftProj: LeftProjection[L, R])(pos: Position): LeftValuable[L, R]", "member" : "org.scalatest.EitherValues.convertLeftProjectionToValuable", "link" : "project\/Spec.html#convertLeftProjectionToValuable[L,R](leftProj:Either.LeftProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.LeftValuable[L,R]", "kind" : "implicit def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/Spec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/Spec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/Spec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/Spec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "diagrammedAssertionsHelper", "tail" : ": DiagrammedAssertionsHelper", "member" : "org.scalatest.DiagrammedAssertions.diagrammedAssertionsHelper", "link" : "project\/Spec.html#diagrammedAssertionsHelper:DiagrammedAssertions.this.DiagrammedAssertionsHelper", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FreeSpec.toString", "link" : "project\/Spec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FreeSpecLike.testDataFor", "link" : "project\/Spec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FreeSpecLike.styleName", "link" : "project\/Spec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FreeSpecLike.behave", "link" : "project\/Spec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FreeSpecLike.run", "link" : "project\/Spec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FreeSpecLike.testNames", "link" : "project\/Spec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FreeSpecLike.runTests", "link" : "project\/Spec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FreeSpecLike.runTest", "link" : "project\/Spec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FreeSpecLike.tags", "link" : "project\/Spec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "convertToFreeSpecStringWrapper", "tail" : "(s: String)(pos: Position): FreeSpecStringWrapper", "member" : "org.scalatest.FreeSpecLike.convertToFreeSpecStringWrapper", "link" : "project\/Spec.html#convertToFreeSpecStringWrapper(s:String)(implicitpos:org.scalactic.source.Position):FreeSpecLike.this.FreeSpecStringWrapper", "kind" : "implicit def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FreeSpecLike.registerIgnoredTest", "link" : "project\/Spec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FreeSpecLike.registerTest", "link" : "project\/Spec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FreeSpecLike.markup", "link" : "project\/Spec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FreeSpecLike.alert", "link" : "project\/Spec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FreeSpecLike.note", "link" : "project\/Spec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FreeSpecLike.info", "link" : "project\/Spec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "project\/Spec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "project\/Spec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "project\/Spec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "project\/Spec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "project\/Spec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "project\/Spec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "project\/Spec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "project\/Spec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "project\/Spec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "project\/Spec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "project\/Spec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "project\/Spec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "project\/Spec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/Spec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/Spec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/Spec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/Spec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/Spec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/Spec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/Spec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/Spec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/Spec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/Spec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "project\/Spec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "project\/Spec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "project\/Spec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "project\/Spec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "project\/Spec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "project\/Spec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "project\/Spec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "project\/Spec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "project\/Spec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "project\/Spec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "project\/Spec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "project\/Spec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "project\/Spec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "project\/Spec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "project\/Spec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "project\/Spec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "project\/Spec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "project\/Spec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/Spec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/Spec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/Spec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/Spec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/Spec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/Spec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "project\/Spec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/Spec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/Spec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/Spec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/Spec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/Spec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/Spec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/Spec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Spec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Spec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/Spec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/Spec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/Spec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/Spec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/Spec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/Spec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/Spec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/Spec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/Spec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "project\/Spec.html", "kind" : "class"}, {"name" : "project.SpecLike", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/SpecLike.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/SpecLike.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SpecLike) ⇒ Boolean, msg: ⇒ Any): SpecLike", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SpecLike.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SpecLike) ⇒ Boolean): SpecLike", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SpecLike.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SpecLike", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SpecLike.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SpecLike", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/SpecLike.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SpecLike, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/SpecLike.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SpecLike, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/SpecLike.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "SuccessOrFailure", "tail" : "", "member" : "org.scalatest.TryValues.SuccessOrFailure", "link" : "project\/SpecLike.html#SuccessOrFailure[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Valuable", "tail" : "", "member" : "org.scalatest.OptionValues.Valuable", "link" : "project\/SpecLike.html#Valuable[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "RightValuable", "tail" : "", "member" : "org.scalatest.EitherValues.RightValuable", "link" : "project\/SpecLike.html#RightValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "LeftValuable", "tail" : "", "member" : "org.scalatest.EitherValues.LeftValuable", "link" : "project\/SpecLike.html#LeftValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "DiagrammedAssertionsHelper", "tail" : "", "member" : "org.scalatest.DiagrammedAssertions.DiagrammedAssertionsHelper", "link" : "project\/SpecLike.html#DiagrammedAssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "project\/SpecLike.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "project\/SpecLike.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "project\/SpecLike.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "convertTryToSuccessOrFailure", "tail" : "(theTry: Try[T])(pos: Position): SuccessOrFailure[T]", "member" : "org.scalatest.TryValues.convertTryToSuccessOrFailure", "link" : "project\/SpecLike.html#convertTryToSuccessOrFailure[T](theTry:scala.util.Try[T])(implicitpos:org.scalactic.source.Position):TryValues.this.SuccessOrFailure[T]", "kind" : "implicit def"}, {"label" : "convertOptionToValuable", "tail" : "(opt: Option[T])(pos: Position): Valuable[T]", "member" : "org.scalatest.OptionValues.convertOptionToValuable", "link" : "project\/SpecLike.html#convertOptionToValuable[T](opt:Option[T])(implicitpos:org.scalactic.source.Position):OptionValues.this.Valuable[T]", "kind" : "implicit def"}, {"label" : "convertRightProjectionToValuable", "tail" : "(rightProj: RightProjection[L, R])(pos: Position): RightValuable[L, R]", "member" : "org.scalatest.EitherValues.convertRightProjectionToValuable", "link" : "project\/SpecLike.html#convertRightProjectionToValuable[L,R](rightProj:Either.RightProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.RightValuable[L,R]", "kind" : "implicit def"}, {"label" : "convertLeftProjectionToValuable", "tail" : "(leftProj: LeftProjection[L, R])(pos: Position): LeftValuable[L, R]", "member" : "org.scalatest.EitherValues.convertLeftProjectionToValuable", "link" : "project\/SpecLike.html#convertLeftProjectionToValuable[L,R](leftProj:Either.LeftProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.LeftValuable[L,R]", "kind" : "implicit def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/SpecLike.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "project\/SpecLike.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/SpecLike.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "project\/SpecLike.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "diagrammedAssertionsHelper", "tail" : ": DiagrammedAssertionsHelper", "member" : "org.scalatest.DiagrammedAssertions.diagrammedAssertionsHelper", "link" : "project\/SpecLike.html#diagrammedAssertionsHelper:DiagrammedAssertions.this.DiagrammedAssertionsHelper", "kind" : "val"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "project\/SpecLike.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "project\/SpecLike.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "project\/SpecLike.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "project\/SpecLike.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SpecLike.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SpecLike.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SpecLike.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "project\/SpecLike.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SpecLike.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SpecLike.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SpecLike.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "project\/SpecLike.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/SpecLike.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "project\/SpecLike.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "project\/SpecLike.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "project\/SpecLike.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "project\/SpecLike.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "project\/SpecLike.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "project\/SpecLike.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "project\/SpecLike.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "project\/SpecLike.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "project\/SpecLike.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "project\/SpecLike.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "project\/SpecLike.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "project\/SpecLike.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "project\/SpecLike.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "project\/SpecLike.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "project\/SpecLike.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "project\/SpecLike.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "project\/SpecLike.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "project\/SpecLike.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "project\/SpecLike.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SpecLike.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SpecLike.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SpecLike.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SpecLike.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "project\/SpecLike.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "project\/SpecLike.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "project\/SpecLike.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/SpecLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/SpecLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/SpecLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/SpecLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/SpecLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/SpecLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/SpecLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SpecLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SpecLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/SpecLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/SpecLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/SpecLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/SpecLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/SpecLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/SpecLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/SpecLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/SpecLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/SpecLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/SpecLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Base trait for unit tests.", "trait" : "project\/SpecLike.html", "kind" : "trait"}], "project.common" : [{"name" : "project.common.Constants", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/common\/Constants.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/common\/Constants.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Constants) ⇒ Boolean, msg: ⇒ Any): Constants", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/common\/Constants.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Constants) ⇒ Boolean): Constants", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/common\/Constants.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Constants", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/common\/Constants.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Constants", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/common\/Constants.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Constants, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/common\/Constants.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Constants, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/common\/Constants.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Warts", "tail" : "", "member" : "project.common.Constants.Warts", "link" : "project\/common\/Constants.html#Warts", "kind" : "object"}, {"label" : "Goats", "tail" : "", "member" : "project.common.Constants.Goats", "link" : "project\/common\/Constants.html#Goats", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/common\/Constants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/common\/Constants.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/common\/Constants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/common\/Constants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/common\/Constants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/common\/Constants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/common\/Constants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/common\/Constants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/common\/Constants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/common\/Constants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/common\/Constants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/common\/Constants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/common\/Constants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/common\/Constants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/common\/Constants.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/common\/Constants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/common\/Constants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/common\/Constants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/common\/Constants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "project\/common\/Constants$.html", "members_object" : [{"label" : "Warts", "tail" : "", "member" : "project.common.Constants.Warts", "link" : "project\/common\/Constants.html#Warts", "kind" : "object"}, {"label" : "Goats", "tail" : "", "member" : "project.common.Constants.Goats", "link" : "project\/common\/Constants.html#Goats", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/common\/Constants$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/common\/Constants$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/common\/Constants$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/common\/Constants$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/common\/Constants$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/common\/Constants$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/common\/Constants$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/common\/Constants$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/common\/Constants$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/common\/Constants$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/common\/Constants$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/common\/Constants$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/common\/Constants$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/common\/Constants$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/common\/Constants$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/common\/Constants$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/common\/Constants$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/common\/Constants$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/common\/Constants$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "project\/common\/Constants.html", "kind" : "trait"}], "project.jmh" : [{"name" : "project.jmh.BenchmarkExample", "shortDescription" : "Sample benchmark class.", "object" : "project\/jmh\/BenchmarkExample$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/jmh\/BenchmarkExample.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/jmh\/BenchmarkExample.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BenchmarkExample) ⇒ Boolean, msg: ⇒ Any): BenchmarkExample", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/jmh\/BenchmarkExample.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BenchmarkExample) ⇒ Boolean): BenchmarkExample", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/jmh\/BenchmarkExample.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): BenchmarkExample", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/jmh\/BenchmarkExample.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BenchmarkExample", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/jmh\/BenchmarkExample.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BenchmarkExample, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/jmh\/BenchmarkExample.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BenchmarkExample, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/jmh\/BenchmarkExample.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "ops2", "tail" : "(): Unit", "member" : "project.jmh.BenchmarkExample.ops2", "link" : "project\/jmh\/BenchmarkExample.html#ops2():Unit", "kind" : "def"}, {"label" : "ops1", "tail" : "(): Unit", "member" : "project.jmh.BenchmarkExample.ops1", "link" : "project\/jmh\/BenchmarkExample.html#ops1():Unit", "kind" : "def"}, {"member" : "project.jmh.BenchmarkExample#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/jmh\/BenchmarkExample.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/jmh\/BenchmarkExample.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/jmh\/BenchmarkExample.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/jmh\/BenchmarkExample.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/jmh\/BenchmarkExample.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/jmh\/BenchmarkExample.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/jmh\/BenchmarkExample.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/jmh\/BenchmarkExample.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/jmh\/BenchmarkExample.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/jmh\/BenchmarkExample.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/jmh\/BenchmarkExample.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/jmh\/BenchmarkExample.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/jmh\/BenchmarkExample.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/jmh\/BenchmarkExample.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/jmh\/BenchmarkExample.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/jmh\/BenchmarkExample.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/jmh\/BenchmarkExample.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/jmh\/BenchmarkExample.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/jmh\/BenchmarkExample.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "s", "tail" : ": Seq[String]", "member" : "project.jmh.BenchmarkExample.s", "link" : "project\/jmh\/BenchmarkExample$.html#s:Seq[String]", "kind" : "val"}, {"label" : "i", "tail" : ": Int", "member" : "project.jmh.BenchmarkExample.i", "link" : "project\/jmh\/BenchmarkExample$.html#i:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/jmh\/BenchmarkExample$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/jmh\/BenchmarkExample$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/jmh\/BenchmarkExample$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/jmh\/BenchmarkExample$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/jmh\/BenchmarkExample$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/jmh\/BenchmarkExample$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/jmh\/BenchmarkExample$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/jmh\/BenchmarkExample$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/jmh\/BenchmarkExample$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/jmh\/BenchmarkExample$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/jmh\/BenchmarkExample$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/jmh\/BenchmarkExample$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/jmh\/BenchmarkExample$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/jmh\/BenchmarkExample$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/jmh\/BenchmarkExample$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/jmh\/BenchmarkExample$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/jmh\/BenchmarkExample$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/jmh\/BenchmarkExample$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/jmh\/BenchmarkExample$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "project\/jmh\/BenchmarkExample.html", "kind" : "class"}], "project.util" : [{"name" : "project.util.Logging", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "project\/util\/Logging.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "project\/util\/Logging.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Logging) ⇒ Boolean, msg: ⇒ Any): Logging", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/util\/Logging.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Logging) ⇒ Boolean): Logging", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/util\/Logging.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Logging", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/util\/Logging.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Logging", "member" : "scala.Predef.Ensuring.ensuring", "link" : "project\/util\/Logging.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Logging, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "project\/util\/Logging.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Logging, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "project\/util\/Logging.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "project\/util\/Logging.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "project\/util\/Logging.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "project\/util\/Logging.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "project\/util\/Logging.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "project\/util\/Logging.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "project\/util\/Logging.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "project\/util\/Logging.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "project\/util\/Logging.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/util\/Logging.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/util\/Logging.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "project\/util\/Logging.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "project\/util\/Logging.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "project\/util\/Logging.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "project\/util\/Logging.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "project\/util\/Logging.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "project\/util\/Logging.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "project\/util\/Logging.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "project\/util\/Logging.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "project\/util\/Logging.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "project\/util\/Logging.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "project\/util\/Logging.html", "kind" : "trait"}]};